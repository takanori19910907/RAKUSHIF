<!DOCTYPE html>
<html>
  <head>
    <title>Rakushif</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all' %>
    <%= javascript_pack_tag 'application' %>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    
  </head>

  <body>
    <div id="global-container">
      <div id="container">    
        <%= render 'layouts/header'  %>
        <%= yield %>
      </div>
      <%= render 'layouts/mobile-menu' %>
    </div>
  </body>
  <script>
    class MobileMenu {
      constructor() {
        this.DOM = {};
        this.DOM.btn = document.querySelector('.mobile-menu__btn');
        this.DOM.cover = document.querySelector('.mobile-menu__cover');
        this.DOM.container = document.querySelector('#global-container');
        this.eventType = this._getEventType();
        this._addEvent();
      }

      _getEventType() {
        return window.ontouchstart ? 'touchstart' : 'click';
      }

      _toggle() {
        this.DOM.container.classList.toggle('menu-open');
      }

      _addEvent() {
        this.DOM.btn.addEventListener(this.eventType, this._toggle.bind(this));
        this.DOM.cover.addEventListener(this.eventType, this._toggle.bind(this));
      }
    }

new MobileMenu();

// class ScrollObserver {
//   constructor(els, cb, options) {
//     this.els = document.querySelectorAll('.service__item');
//     this.cd = 
//     console.log(this.els);
//     const defaultOptions = {
//       root: null,
//       rootMargin: "0px",
//       threshold: 0,
//       once: true
//     }
//     this. = cb;
//     this.options = Object.assign(defaultOptions, options);
//     this.once = this.options.once;
//     this._init();
//   }

//   _init() {
//     const callBack = function(entries, observer) {
//       alert('ok');
//     };
//   }

  document.addEventListener('DOMContentLoaded', function () {

  const els = document.querySelectorAll('.service__item');
  const callBack = function(entries, observer) {
    entries.forEach(entry => {
      if(entry.isIntersecting) {
      entry.target.classList.add('add-border');
      observer.unobserve(entry.target);
      } else {
      }
    })
  };

  const io = new IntersectionObserver(callBack);
  els.forEach(el => io.observe(el));

// new ScrollObserver();
  });
  </script>
</html>
